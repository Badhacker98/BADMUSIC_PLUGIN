import re
import logging
import asyncio
import importlib
from sys import argv
from pyrogram import idle
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from pyrogram.errors.exceptions.bad_request_400 import (
    AccessTokenExpired,
    AccessTokenInvalid,
)
from BADMUSIC.utils.database import get_assistant
from config import API_ID, API_HASH
from BADMUSIC import app
from BADMUSIC.misc import SUDOERS
from BADMUSIC.utils.database import get_assistant, clonebotdb
from config import LOG_GROUP_ID 

CLONES = set()


@app.on_message(filters.command("clone") & SUDOERS)
async def clone_txt(client, message):
    userbot = await get_assistant(message.chat.id)
    if len(message.command) > 1:
        bot_token = message.text.split("/clone", 1)[1].strip()
        mi = await message.reply_text("·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ ·¥° ú…™ ü·¥á …™ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ üí´ ")
        try:
            ai = Client(
                bot_token,
                API_ID,
                API_HASH,
                bot_token=bot_token,
                plugins=dict(root="BADMUSIC.plugins"),
            )
            await ai.start()
            bot = await ai.get_me()
            bot_users = await ai.get_users(bot.username)
            bot_id = bot_users.id

        except (AccessTokenExpired, AccessTokenInvalid):
            await mi.edit_text(
                " è·¥è·¥ú  ú·¥Ä·¥†·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö ·¥Ä…¥ …™…¥·¥†·¥Ä ü…™·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä ·¥†·¥Ä ü…™·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥."
            )
            return
        except Exception as e:
            await mi.edit_text(f"An error occurred: {str(e)}")
            return

        # Proceed with the cloning process
        await mi.edit_text(
            "·¥Ñ ü·¥è…¥…™…¥…¢ ·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú± Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥°·¥Ä…™·¥õ Íú∞·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è  ô·¥á Íú±·¥õ·¥Ä Ä·¥õ."
        )
        try:

            await app.send_message(
                LOG_GROUP_ID, f"**#New_Clones**\n\n**Bot:- @{bot.username}**"
            )
            await userbot.send_message(bot.username, "/start")

            details = {
                "bot_id": bot.id,
                "is_bot": True,
                "user_id": message.from_user.id,
                "name": bot.first_name,
                "token": bot_token,
                "username": bot.username,
            }
            clonebotdb.insert_one(details)
            CLONES.add(bot.id)
            await mi.edit_text(
                f" ô·¥è·¥õ @{bot.username}  ú·¥ÄÍú±  ô·¥á·¥á…¥ Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è ·¥Ñ ü·¥è…¥·¥á·¥Ö ·¥Ä…¥·¥Ö Íú±·¥õ·¥Ä Ä·¥õ·¥á·¥Ö ‚úÖ.\n** Ä·¥á·¥ç·¥è·¥†·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô è :- /delclone**"
            )
        except BaseException as e:
            logging.exception("Error while cloning bot.")
            await mi.edit_text(
                f"‚ö†Ô∏è <b>·¥á Ä Ä·¥è Ä:</b>\n\n<code>{e}</code>\n\n**·¥ã…™…¥·¥Ö ü è “ì·¥è·¥°·¥Ä Ä·¥Ö ·¥õ ú…™s ·¥ç·¥áss·¥Ä…¢·¥á ·¥õ·¥è @vk_zone ·¥õ·¥è …¢·¥á·¥õ ·¥Äss…™s·¥õ·¥Ä…¥·¥Ñ·¥á**"
            )
    else:
        await message.reply_text(
            "**…¢…™·¥†·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥ÄÍú∞·¥õ·¥á Ä /clone ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö Íú∞ Ä·¥è·¥ç @Botfather.**"
        )


@app.on_message(
    filters.command(
        [
            "deletecloned",
            "delcloned",
            "delclone",
            "deleteclone",
            "removeclone",
            "cancelclone",
        ]
    )
)
async def delete_cloned_bot(client, message):
    try:
        if len(message.command) < 2:
            await message.reply_text(
                "**‚ö†Ô∏è ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ ·¥ÄÍú∞·¥õ·¥á Ä ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö.**"
            )
            return

        bot_token = " ".join(message.command[1:])
        await message.reply_text("·¥ò Ä·¥è·¥Ñ·¥áÍú±Íú±…™…¥…¢ ·¥õ ú·¥á  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥
        ...")

        cloned_bot = clonebotdb.find_one({"token": bot_token})
        if cloned_bot:
            clonebotdb.delete_one({"token": bot_token})
            CLONES.remove(cloned_bot["bot_id"])
            await message.reply_text(
                "**ü§ñ  è·¥è·¥ú Ä ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ  ú·¥ÄÍú±  ô·¥á·¥á…¥ ·¥Ö…™Íú±·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥ç è Íú±·¥á Ä·¥†·¥á Ä ‚ò†Ô∏è\n·¥Ñ ü·¥è…¥·¥á  ô è :- /clone**"
            )
        else:
            await message.reply_text(
                "**‚ö†Ô∏è ·¥õ ú·¥á ·¥ò Ä·¥è·¥†…™·¥Ö·¥á·¥Ö  ô·¥è·¥õ ·¥õ·¥è·¥ã·¥á…¥ …™Íú± …¥·¥è·¥õ …™…¥ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ü…™Íú±·¥õ.**"
            )
    except Exception as e:
        await message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á ·¥Ö·¥á ü·¥á·¥õ…™…¥…¢ ·¥õ ú·¥á ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õ.")
        logging.exception(e)


async def restart_bots():
    global CLONES
    try:
        logging.info(" Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢ ·¥Ä ü ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±.....")
        bots = clonebotdb.find()
        async for bot in bots:
            bot_token = bot["token"]
            ai = Client(
                f"{bot_token}",
                API_ID,
                API_HASH,
                bot_token=bot_token,
                plugins=dict(root="BADMUSIC.plugins"),
            )
            await ai.start()
            bot = await ai.get_me()
            if bot.id not in CLONES:
                try:
                    CLONES.add(bot.id)
                except Exception:
                    pass
    except Exception as e:
        logging.exception("·¥á Ä Ä·¥è Ä ·¥° ú…™ ü·¥á  Ä·¥áÍú±·¥õ·¥Ä Ä·¥õ…™…¥…¢  ô·¥è·¥õÍú±.")


@app.on_message(filters.command("cloned") & SUDOERS)
async def list_cloned_bots(client, message):
    try:
        cloned_bots = clonebotdb.find()
        cloned_bots_list = await cloned_bots.to_list(length=None)

        if not cloned_bots_list:
            await message.reply_text("…¥·¥è  ô·¥è·¥õÍú±  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥Ñ ü·¥è…¥·¥á·¥Ö  è·¥á·¥õ.")
            return

        total_clones = len(cloned_bots_list)
        text = f"·¥õ·¥è·¥õ·¥Ä ü ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õs: {total_clones}\n\n"

        for bot in cloned_bots_list:
            text += f"Bot ID: {bot['bot_id']}\n"
            text += f"Bot Name: {bot['name']}\n"
            text += f"Bot Username: @{bot['username']}\n\n"

        await message.reply_text(text)
    except Exception as e:
        logging.exception(e)
        await message.reply_text("·¥Ä…¥ ·¥á Ä Ä·¥è Ä ·¥è·¥Ñ·¥Ñ·¥ú Ä Ä·¥á·¥Ö ·¥° ú…™ ü·¥á  ü…™Íú±·¥õ…™…¥…¢ ·¥Ñ ü·¥è…¥·¥á·¥Ö  ô·¥è·¥õÍú±.")
